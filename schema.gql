# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""A Bid Input"""
input BidInput {
  _id: String
  prev_value: Float!
  productId: String!
  submitted: Float!
  tickets: Float!
  user: String!
}

type BidType {
  _id: String!
  prev_value: Float!
  productId: String!
  submitted: Boolean!
  tickets: Float!
  user: String!
}

"""Credentials of a user"""
input Credentials {
  email: String!
  password: String!
}

type Mutation {
  """Adds a product to the database"""
  addProduct(product: ProductInput!): ProductType!
  addTickets(tickets: Float!, username: String!): UserType!

  """Awards a product to a certain user"""
  award(productId: String, username: String): ProductType!

  """changes the amount on a bid"""
  changeBid(bid: BidInput!): BidType!

  """Deletes a bid that a user made"""
  deleteBid(bid: BidInput!): BidType!

  """Makes a bid for a user"""
  makeBid(bid: BidInput!): BidType

  """Requests a new password"""
  resetPassword(email: String!): Boolean

  """Signs in a user"""
  signin(credentials: Credentials!): String

  """Signs out a user"""
  signout: String

  """Signs up a user"""
  signup(user: UserInput!): String!
}

"""A Product Input"""
input ProductInput {
  description: String!
  id: String
  name: String!
  owner: String!
  photo: String!
}

type ProductType {
  _id: String!
  awardee: UserType!
  bids: [String!]!
  description: String!
  name: String!
  owner: String!
  photo: String!
}

type Query {
  getAllBids: [BidType!]!
  getAllUsers: [UserType!]!

  """Returns all bids"""
  getBids: [BidType!]!

  """Returns all the bids of a certain product"""
  getProductBids(productId: String!): [BidType!]!

  """Gets all the products in the database"""
  getProducts: [ProductType!]!

  """Returns a user based on a user's username"""
  getUser(email: String!): UserType

  """Get a particular user's bids"""
  getUserBids(username: String!): [BidType!]!
}

"""Roles of a User based on access"""
enum Role {
  """A Moderator has some privilages"""
  ADMIN

  """An Admin has all privilages"""
  SUPER
}

type Subscription {
  bidAdded: [BidType!]
  newUser: [UserType!]
  productAdded: ProductType!
}

"""A User Input"""
input UserInput {
  _id: Float
  avatar: Float!
  email: String!
  roles: Role
  username: String!
}

type UserType {
  _id: String!
  avatar: Float!
  award: Float!
  bids: [String!]!
  email: String!
  roles: Role
  tickets: Float!
  totalTickets: Float!
  username: String!
}
